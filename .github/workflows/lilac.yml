name: lilac
on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      lilac_args:
        default: ''
        description: 'Args pass to lilac'
        type: string
jobs:
  lilac:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
    steps:
      - name: 🛠️📂 Prepare the directory
        run: |
          mkdir -p lilac/gitrepo
          mkdir -p lilac/repo
          mkdir -p lilac/remote
          mkdir -p lilac/config
      - name: ⬇️🐙 Clone gitrepo
        run: |
          echo "${{ secrets.SSH_KEY }}" | install -Dm600 /dev/stdin ~/.ssh/id_ed25519
          git clone --single-branch --depth 1 git@github.com:Misaka13514-AUR/repo.git lilac/gitrepo
      - name: 🛠️⚙️ Write config
        run: |
          umask 077
          echo "${{ secrets.SSH_KEY }}" > lilac/config/ssh_key
          echo "${{ secrets.GPG_KEY }}" > lilac/config/gpg_key
          echo '${{ secrets.RCLONE_CONFIG }}' > lilac/config/rclone.conf
          cp -a lilac/gitrepo/lilac.toml lilac/config/lilac.toml
          sed -i "s|<DB_URL>|${{ secrets.DB_URL }}|g" lilac/config/lilac.toml
          sed -i "s|<SMTP_PASSWORD>|${{ secrets.SMTP_PASSWORD }}|g" lilac/config/lilac.toml
      - name: 🛠️⚙️ Setup Docker
        run: |
          echo '{"exec-opts":["native.cgroupdriver=systemd"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: 🛠️🐬 Start Docker container
        run: |
          docker run --rm -d \
            --name lilac \
            --privileged \
            --cap-add SYS_ADMIN \
            --security-opt seccomp=unconfined \
            --cgroup-parent=docker.slice \
            --cgroupns private \
            --tmpfs /tmp \
            --tmpfs /run \
            --tmpfs /run/lock \
            -v $(pwd)/lilac:/home/lilac/lilac \
            ghcr.io/misaka13514-aur/actions-playground:latest
      - name: 🛠️🐬 Set up system environment in Docker
        run: |
          docker exec -t lilac /init.sh
      - name: 🛠️🐬 Set up user environment in Docker
        run: |
          docker exec -t lilac loginctl enable-linger lilac
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/gpg --batch --import lilac/config/gpg_key
      - name: 🛠️🗂️ Mount remote directory
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone mount --daemon --read-only remote: lilac/remote
      - name: ⬇️🔒 Download lilac persist files
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone sync -v --exclude-from /rclone-exclude.txt remote:lilac .lilac
      - name: 🛠️🤖 Run lilac
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/lilac ${{ inputs.lilac_args }}
      - name: ⬆️📜 Upload lilac logs
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone copy -v --copy-links .lilac/log remote:aur/log
      - name: ⬆️🔒 Upload lilac persist files
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone sync -v --exclude-from /rclone-exclude.txt .lilac remote:lilac
      - name: 🧙👀 Print lilac logs
        run: |
          echo "Summary log:"
          docker exec -t lilac cat /home/lilac/.lilac/build.log
          echo ""
          echo "Detailed log:"
          docker exec -t lilac /group-log.sh
      - name: 📜➡️📄 Output build log to job summary
        run: |
          echo "## Build log" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          docker exec -t lilac cat /home/lilac/.lilac/build.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: 🔢📦 Count built packages
        id: count
        run: |
          echo "pkgs_count=$(docker exec -t lilac /usr/bin/bash -c 'find /home/lilac/lilac/repo -type f -name *.pkg.tar.zst | wc -l')" >> $GITHUB_OUTPUT
      - name: ✍️📦 Attest packages
        if: steps.count.outputs.pkgs_count != 0
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'lilac/repo/*.pkg.tar.zst'
      - name: ⬇️🛢️ Download pacman database
        if: steps.count.outputs.pkgs_count != 0
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone copy -v --copy-links remote:aur/x86_64/apeiria.db lilac/repo
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone copy -v --copy-links remote:aur/x86_64/apeiria.db.tar.gz lilac/repo
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone copy -v --copy-links remote:aur/x86_64/apeiria.files lilac/repo
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone copy -v --copy-links remote:aur/x86_64/apeiria.files.tar.gz lilac/repo
      - name: 📦➡️🛢️ Add packages to database
        if: steps.count.outputs.pkgs_count != 0
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/repo-add lilac/repo/apeiria.db.tar.gz lilac/repo/*.pkg.tar.zst
      - name: ⬆️📦🛢️✍️ Upload packages and database
        if: steps.count.outputs.pkgs_count != 0
        run: |
          docker exec -t lilac machinectl shell lilac@ \
            /usr/bin/rclone copy -v --copy-links lilac/repo/ remote:aur/x86_64
      - name: 💩➡️🚽 Clean up
        if: steps.count.outputs.pkgs_count != 0
        run: |
          echo TODO
      - name: 🐛 Setup tmate session
        if: always()
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          install-dependencies: true
